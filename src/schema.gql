# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Success {
  success: Boolean!
}

type UserCount {
  categories: Int!
  passwords: Int!
}

type UserGraphQLDTO {
  id: ID!
  email: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  _count: UserCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CategoryCount {
  passwords: Int!
}

type CategoryGraphQLDTO {
  id: ID!
  user_id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  owner: UserGraphQLDTO!
  _count: CategoryCount!
}

type Query {
  FindUser(user_id: String!): UserGraphQLDTO!
  FindCategory(category_id: String!): CategoryGraphQLDTO!
  FindManyCategories(where: CategoryWhereInput, orderBy: CategoryOrderByWithRelationInput, pagination: Pagination = {}, user_id: String!): [CategoryGraphQLDTO!]!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: UuidFilter
  user_id: UuidFilter
  name: StringFilter
  user: UserRelationFilter
  passwords: PasswordListRelationFilter
}

input UuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedUuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: UuidFilter
  email: StringFilter
  name: StringFilter
  categories: CategoryListRelationFilter
  passwords: PasswordListRelationFilter
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input PasswordListRelationFilter {
  every: PasswordWhereInput
  some: PasswordWhereInput
  none: PasswordWhereInput
}

input PasswordWhereInput {
  AND: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  id: UuidFilter
  user_id: UuidFilter
  category_id: UuidNullableFilter
  description: StringNullableFilter
  username: StringNullableFilter
  value: StringFilter
  user: UserRelationFilter
  category: CategoryNullableRelationFilter
}

input UuidNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
}

input NestedUuidNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CategoryNullableRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  user_id: SortOrder
  name: SortOrder
  user: UserOrderByWithRelationInput
  passwords: PasswordOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  categories: CategoryOrderByRelationAggregateInput
  passwords: PasswordOrderByRelationAggregateInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input PasswordOrderByRelationAggregateInput {
  _count: SortOrder
}

input Pagination {
  skip: Int!
  take: Int!
}

type Mutation {
  UpdateUser(input: UpdateUserGraphQLInput!): UserGraphQLDTO!
  DeleteUser(user_id: String!): Success!
  CreateCategory(input: CreateCategoryGraphQLInput!): CategoryGraphQLDTO!
  UpdateCategory(input: UpdateCategoryGraphQLInput!): CategoryGraphQLDTO!
  DeleteCategory(input: DeleteCategoryGraphQLInput!): Success!
  SignUp(input: SignUpGraphQLInput!): Success!
  ChangeAccountPassword(input: ChangeAccountPasswordGraphQLInput!): Success!
}

input UpdateUserGraphQLInput {
  user_id: String!
  email: String
  name: String
}

input CreateCategoryGraphQLInput {
  user_id: String!
  name: String!
}

input UpdateCategoryGraphQLInput {
  category_id: String!
  user_id: String!
  name: String!
}

input DeleteCategoryGraphQLInput {
  category_id: String!
  user_id: String!
}

input SignUpGraphQLInput {
  email: String!
  name: String!
  password: String!
}

input ChangeAccountPasswordGraphQLInput {
  userId: String!
  currentPassword: String!
  newPassword: String!
}