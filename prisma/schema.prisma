// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestjsgraphql {
  provider                 = "prisma-nestjs-graphql"
  output                   = "./@generated"
  fields_Validator_input   = "true"
  fields_Validator_from    = "class-validator"
  fields_Transformer_model = "true"
  fields_Transformer_from  = "class-transformer"
}

model User {
  /// @Validator.IsUUID('4')
  /// @Validator.IsNotEmpty()
  /// @HideField({ match: '{UserUncheckedCreateInput, UserCreateInput, UserUncheckedUpdateInput, UserUpdateInput}'})
  id String @id @default(uuid()) @db.Uuid

  /// @Validator.IsEmail()
  /// @Validator.MaxLength(100)
  /// @Validator.IsNotEmpty()
  email String @unique @db.VarChar(100)

  /// @Validator.IsUUID('4')
  /// @Validator.Length(3, 100)
  /// @Validator.IsNotEmpty()
  name String @db.VarChar(100)

  /// @Validator.IsString()
  /// @Validator.Length(6, 100)
  /// @Validator.IsNotEmpty()
  /// @HideField({ input: false, output: true })
  password String @db.VarChar(100)

  /// @Validator.ValidatedNested()
  /// @Transformer.Type(() => Category)
  /// @HideField({ match: '{UserUncheckedCreateInput, UserCreateInput, UserUncheckedUpdateInput, UserUpdateInput}'})
  categories Category[]

  /// @HideField({ input: true, output: false })
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// @HideField({ input: true, output: false })
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// @HideField({ input: true, output: false })
  deleted_at DateTime?  @db.Timestamptz(6)

  @@map("users")
}

model Category {
  /// @Validator.IsUUID('4')
  /// @Validator.IsNotEmpty()
  /// @HideField({ match: '{CategoryUncheckedCreateInput, CategoryCreateInput, CategoryUncheckedUpdateInput, CategoryUpdateInput}'})
  id String @id @default(uuid()) @db.Uuid

  /// @Validator.IsUUID('4')
  /// @Validator.IsNotEmpty()
  user_id String @db.Uuid

  /// @Validator.IsUUID('4')
  /// @Validator.MaxLength(50)
  /// @Validator.IsNotEmpty()
  name String @db.VarChar(50)

  /// @Validator.ValidatedNested()
  /// @Transformer.Type(() => User)
  /// @HideField({ match: '{CategoryUncheckedCreateInput, CategoryCreateInput, CategoryUncheckedUpdateInput, CategoryUpdateInput}'})
  user User @relation(fields: [user_id], references: [id])

  /// @HideField({ input: true, output: false })
  created_at DateTime @default(now()) @db.Timestamptz(6)

  /// @HideField({ input: true, output: false })
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  /// @HideField({ input: true, output: false })
  deleted_at DateTime? @db.Timestamptz(6)

  @@map("categories")
}
